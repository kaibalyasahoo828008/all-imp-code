

#include <iostream>
using namespace std;
struct Node/* to creat a node containg self reference point and */
{
    int data;
    struct Node *next;/* selef reference pointer class*/
}
*first=NULL;/* gobalt pointer */



void creat(int A[],int n)
{
    int i;/* this variable use to scan throw elements*/
    struct Node *t,*last;/* *t =it is used to creat new node*/
    first=new Node;
    first->data=A[0];
    first->next=NULL;
    last=first;
    
    
    for(i=1;i<n;i++)
    {
        t=new Node;
        t->data=A[i];
        last->next=t;
        last=t;
    }
    
}

void display(struct Node *p)
{
    if(p!=NULL)
    {
        cout<<p->data<<endl;
        display(p->next);
        
        
        
    }
}

/*
int sum1(struct Node *p)
{
    int sum=0;
    while(p!=0)
    {
        sum=sum+p->data;
        
        
        
    }
    return sum;
}*/
/*int sum2(struct Node *p)
{
int sum=0;
    if(p==0)
    {
        return 0;
    }
    else
    {
        sum=sum+p->data;
        return sum2(p->next)+sum;
    }
}
*/
/*int sum3(struct Node *p)
{
    int sum=0;
    if(p)
    {
        sum=sum2(p->next);
        return sum+p->data;
    }
    else
    {
        return x;
    }
}
*/
/*void Display(struct Node *p)
{
    while(p!=NULL)
    {
        cout<<p->data;
        p=p->next;
        
    }
}
*/

Node * search(Node *p,int key)
{
    Node *q=NULL;
    while(p!=NULL)
    {
        if(key==p->data)
        {
            return p;
            
            
        }
        q=p;
        p=p->next;
        
    }
    return NULL;
}

int count(struct Node *p)
{
    int count1=0;
    while(p!=0)
    {
        count1++;
        p=p->next;
        
    }
    return count1;
}

void insertion(struct Node *p,int index,int x)
{
    struct Node *t;
    if(index<0 || index>count(p))
    {
        return ;
    }
    else
    {
        t=new Node;
        t->data=x;
        if(index==0)
        {
            t->next=first;
            first=t;
        }
        else
        {
            for(int i=0;i<index-1;i++)
            {
                p=p->next;
            }
            t->next=p->next;
            p->next=t;
        }
    }
    
    
    
}

void shorted(struct Node *p,int x)
{
    
    struct Node *t,*q=NULL;
    t=new Node;
    t->data=x;
    t->next=NULL;
    if(first==NULL)
    {
        first=t;
    }
    else
    {
        while(p && p->data<x)
        {
            q=p;
            p=p->next;
        }
        if(p==first)
        {
            t->next=first;
            first=t;
        }
        else
        {
            t->next=q->next;
            q->next=t;
        }
    }
    
    
    
    
    
}

int Delete(struct Node *p,int index)
{
    struct Node *q;
    int x=-1;
    if(index<1 || index>count(p))
    {
        return -1;
    }
    else
    {
        if(index==1)
        {
            q=first;
            x=first->data;
            first=first->next;
            delete q;
            return x;
        }
        else
        {
            
            for(int i=0;i<index-1;i++)
            {
                q=p;
                p=p->next;
            }
            q->next=p->next;
            x=p->data;
            delete p;
            return x;
            
            
            
        }
    }
}

int IsSorted(struct Node *p)
{
    int x=first->data;
    while(p!=NULL)
    {
        if(p->data<x)
            return 0;
        x=p->data;
        p=p->next;
    }
    return 1;
    
}

void removeDuplicate(struct Node *p)
{
    
    struct Node *q=p->next;
    while(q!=NULL)
    {
        if(p->data!=q->data)
        {
            p=q;
            q=q->next;
        }
        else
        {
            p->next=q->next;
            delete q;
            q=p->next;
        }
    }
    
    
    
    
    
    
    
    
}




int main()
{
    int A[]={3,5,7,7,10,15};
    creat(A,5);
   // insertion(first, 0, 111);
    display(first);
    Delete(first, 2);
    display(first);
    removeDuplicate(first);
    display(first);
    return 0;
    
    
    
    
    
}
